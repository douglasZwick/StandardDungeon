class ConsoleSystem : ZilchComponent
{
  sends Print : ConsoleSystemEvent;
  
  
  [Static]
  var Spacing : Real = 1 / 10.0;
  
  
  [Dependency]
  var Transform : Transform;
  [Dependency]
  var Area : Area;
  
  
  [Property]
  var MessageArchetype : Archetype = Archetype.ConsoleText;
  [Property][Group("Internal")]
  var MessageRoot : CogPath = CogPath(".");
  
  var MessageArray : Array[Cog] = Array[Cog]();
  var MaxMessageCount : Integer = 40;
  var OldMessageOpacity : Real = 0.25;
  var ScrollSpeed : Real = 0.5;
  var KeyboardScrollMultiplier : Real = 10;
  var ScrollDuration : Real = 0.1;
  var CurrentHeight : Real = 0;
  var ScrollTargetY : Real = 0;
  var ClippingMaterial : Material = Material.BoundsClippedLCDSprite;
  var ActionSequence : ActionSequence;
  var ClippingThickness : Real = 1.25;
  var ClippingMin : Real;
  var ClippingMax : Real;
  var ClippingLowerStop : Real;
  var ClippingUpperStop : Real;
  
  var ConsoleHeight : Real { get { return this.Area.Size.Y; }}
  
  
  function Initialize(init : CogInitializer)
  {
    this.ClippingMin = this.Area.WorldBottom;
    this.ClippingMax = this.Area.WorldTop;
    this.ClippingLowerStop = this.ClippingMin + this.ClippingThickness;
    this.ClippingUpperStop = this.ClippingMax - this.ClippingThickness;
    
    this.ClippingMaterial.BoundsClip.Min = this.ClippingMin;
    this.ClippingMaterial.BoundsClip.LowerStop = this.ClippingLowerStop;
    this.ClippingMaterial.BoundsClip.UpperStop = this.ClippingUpperStop;
    this.ClippingMaterial.BoundsClip.Max = this.ClippingMax;
    
    this.ActionSequence = Action.Sequence(this.Owner.Actions);
    
    Zero.Connect(this.GameSession, Events.Print, this.OnPrint);
    Zero.Connect(this.Space, Events.MouseScroll, this.OnMouseScroll);
    Zero.Connect(this.Space, Events.LogicUpdate, this.OnLogicUpdate);
  }
  
  
  function OnLogicUpdate(event : UpdateEvent)
  {
    // TODO: add gamepad support
    
    var scrollDistance = this.ScrollSpeed * this.KeyboardScrollMultiplier * event.Dt;
    
    var pageUp = Zero.Keyboard.KeyIsDown(Keys.PageUp) || Zero.Keyboard.KeyIsDown(Keys.A);
    var pageDn = Zero.Keyboard.KeyIsDown(Keys.PageDown) || Zero.Keyboard.KeyIsDown(Keys.Z);
    
    if      (pageUp && !pageDn)
      this.Scroll(-scrollDistance);
    else if (!pageUp && pageDn)
      this.Scroll(+scrollDistance);
  }
  
  
  function OnPrint(event : ConsoleSystemEvent)
  {
    var textArray = Array[String]();
    
    foreach (var text in event.TextArray)
      if (!String.IsNullOrEmpty(text))
        textArray.Add(text);
    
    var subtextCount = textArray.Count;
    
    this.Shift(subtextCount);
    
    var message = this.Space.CreateAtPosition(this.MessageArchetype, Real3.Zero);
    message.AttachToPreserveLocal(this.MessageRoot.Cog);
    message.ConsoleText.Setup(textArray);
    
    this.MessageArray.Insert(0, message);
    
    this.Trim();
    
    this.ScrollToBottom();
    
    this.Clip();
  }
  
  
  function OnMouseScroll(event : ViewportMouseEvent)
  {
    var scroll = -event.Scroll.Y * this.ScrollSpeed;
    
    this.Scroll(scroll);
  }
  
  
  function Scroll(scroll : Real)
  {
    if (this.CurrentHeight <= this.ConsoleHeight)
      return;
    
    this.Clip();
    
    this.ScrollTargetY = Math.Clamp(this.ScrollTargetY + scroll, this.ConsoleHeight - this.CurrentHeight, 0);
    
    var targetTranslation = this.Transform.LocalTranslation;
    var currentScrollY = targetTranslation.Y;
    targetTranslation.Y = this.ScrollTargetY;
    
    this.ActionSequence.Cancel();
    this.ActionSequence = Action.Sequence(this.Owner.Actions);
      
      Action.Property(this.ActionSequence, @this.Transform.LocalTranslation, targetTranslation, this.ScrollDuration, Ease.Linear);
      Action.Call(this.ActionSequence, this.Clip);
  }
  
  
  function ScrollToBottom()
  {
    this.Scroll(-this.ScrollTargetY);
  }
  
  
  function Shift(subtextCount : Integer)
  {
    var shiftDistance = subtextCount * ConsoleText.LineSpacing + ConsoleSystem.Spacing;
    this.CurrentHeight += shiftDistance;
    
    foreach (var message in this.MessageArray)
    {
      message.Transform.LocalTranslation += Real3.YAxis * shiftDistance;
      message.ConsoleText.SetOpacity(this.OldMessageOpacity);
    }
  }
  
  
  function Trim()
  {
    if (this.MessageArray.Count >= this.MaxMessageCount)
    {
      var message = this.MessageArray.Pop();
      var subtextCount = message.ConsoleText.TextArray.Count;
      this.CurrentHeight -= subtextCount * ConsoleText.LineSpacing + ConsoleSystem.Spacing;
      
      message.Destroy();
    }
  }
  
  
  function Clip()
  {
    // TODO: use an action to interpolate the stops instead of snapping them
    
    var clippingEpsilon = 1.0e-4;
    var scrollingEpsilon = 0.05;
    
    var currentHeight = this.CurrentHeight;
    var currentWorldY = this.Transform.WorldTranslation.Y;
    var currentWorldTop = currentWorldY + currentHeight;
    
    if (currentWorldY >= this.ClippingMin - scrollingEpsilon)
      this.ClippingMaterial.BoundsClip.LowerStop = this.ClippingMin + clippingEpsilon;
    else
      this.ClippingMaterial.BoundsClip.LowerStop = this.ClippingLowerStop;
    
    if (currentWorldTop <= this.ClippingMax + scrollingEpsilon)
      this.ClippingMaterial.BoundsClip.UpperStop = this.ClippingMax - clippingEpsilon;
    else
      this.ClippingMaterial.BoundsClip.UpperStop = this.ClippingUpperStop;
  }
}


class ConsoleSystemEvent : ZilchEvent
{
  var TextArray : Array[String] = Array[String]();
  
  constructor() : base() {}
  
  constructor(textArray : Array[String]) : base()
  {
    this.TextArray = textArray;
  }
  
  constructor(text0 : String) : base()
  {
    this.TextArray.Add(text0);
  }
  
  constructor(text0 : String, text1 : String) : base()
  {
    this.TextArray.Add(text0);
    this.TextArray.Add(text1);
  }
  
  constructor(text0 : String, text1 : String, text2 : String) : base()
  {
    this.TextArray.Add(text0);
    this.TextArray.Add(text1);
    this.TextArray.Add(text2);
  }
  
  constructor(text0 : String, text1 : String, text2 : String, text3 : String) : base()
  {
    this.TextArray.Add(text0);
    this.TextArray.Add(text1);
    this.TextArray.Add(text2);
    this.TextArray.Add(text3);
  }
}
