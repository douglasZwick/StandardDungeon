class ShockwaveHitBoxBehavior : ZilchComponent
{
  [Dependency]
  var Collider : Collider;
  
  [Property]
  var Direction : Directions;
  var Lifetime : Real = 1;
  var LifeTimer : Real = 0;
  var WaitTime : Real = 0.2;
  var MoveTimer : Real = 0;
  var CastFilter : CastFilter = CastFilter();
  
  [Property]
  var Damage : Integer = 2;
  
  function Initialize(init : CogInitializer)
  {
    Zero.Connect(this.Space, Events.LogicUpdate, this.OnLogicUpdate);
    Zero.Connect(this.Owner, Events.CollisionStarted, this.OnCollisionStarted);
    Zero.Connect(this.Owner, Events.MovementFailed, this.OnMovementFailed);
    
    this.CastFilter.CollisionGroup = CollisionGroup.DefaultGroup;
    this.CastFilter.IgnoreGhost = true;
  }

  function OnMovementFailed(event : MovementEvent)
  {
    this.Owner.Destroy();
  }

  function OnCollisionStarted(event : CollisionEvent)
  {
    var he : HealthEvent = HealthEvent();
    he.Damage = this.Damage;
    event.OtherObject.DispatchEvent(Events.DamageRequest, he);
  }

  function OnLogicUpdate(event : UpdateEvent)
  {
    this.MoveTimer += event.Dt;
    this.LifeTimer += event.Dt;
    if(this.MoveTimer >= this.WaitTime)
    {
      this.PropogateShockwave();
    }
    if(this.LifeTimer >= this.Lifetime)
    {
      this.Owner.Destroy();
    }
  }
  
  
  function PropogateShockwave()
  {
    if(this.Direction == Directions.Down)
    {
      this.Owner.DiscreteMover.Move(-Real3.YAxis);
    }
    else if(this.Direction == Directions.Up)
    {
      this.Owner.DiscreteMover.Move(Real3.YAxis);
    }
    else if(this.Direction == Directions.Right)
    {
      this.Owner.DiscreteMover.Move(Real3.XAxis);
    }
    else if(this.Direction == Directions.Left)
    {
      this.Owner.DiscreteMover.Move(-Real3.XAxis);
    }
    this.MoveTimer = 0;
  }
}

enum Directions
{
  Left,
  Right,
  Up,
  Down
}