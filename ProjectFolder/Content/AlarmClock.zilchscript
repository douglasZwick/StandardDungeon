class AlarmClock : ZilchComponent
{
  sends AlarmRing : ZilchEvent;
  
  
  [Dependency]
  var WebRequester : WebRequester;
  
  
  var Time_ : Real = 0;
  [Property]
  var Time : Real
  {
    get { return this.Time_; }
    
    set
    {
      value = Math.FMod(value, 60 * 60 * 24);
      this.Time_ = value;
      
      this.SetClock();
    }
  }
  
  var TwentyFourHourTime_ : Boolean = false;
  [Property]
  var TwentyFourHourTime : Boolean
  {
    get { return this.TwentyFourHourTime_; }
    
    set
    {
      this.TwentyFourHourTime_ = value;
      
      this.SetClock();
    }
  }
  
  [Property]
  var Hours : Integer
  {
    get
    {
      var s = this.Time_ as Integer;
      var m = s / 60;
      var h = (m / 60) % 24;
      
      if (!this.TwentyFourHourTime_)
      {
        h %= 12;
        
        if (h == 0)
          h = 12;
      }
      
      return h;
    }
    
    set
    {
      this.Time = value * 60 * 60 + this.Minutes * 60 + this.Seconds + this.Period as Integer * 60 * 60 * 12;
    }
  }
  
  [Property]
  var Minutes : Integer
  {
    get
    {
      var s = this.Time_ as Integer;
      var m = (s / 60) % 60;
      
      return m;
    }
    
    set
    {
      this.Time = this.Hours24H * 60 * 60 + value * 60 + this.Seconds;
    }
  }
  
  [Property]
  var Seconds : Integer
  {
    get
    {
      var s = this.Time_ as Integer % 60;
      
      return s;
    }
    
    set
    {
      this.Time = this.Hours24H * 60 * 60 + this.Minutes * 60 + value;
    }
  }
  
  [Property]
  var Period : Period
  {
    get
    {
      if (this.TwentyFourHourTime_)
        return Period.AM;
      
      if (this.Hours24H < 12)
        return Period.AM;
      else
        return Period.PM;
    }
    
    set
    {
      if (this.TwentyFourHourTime_) return;
      
      var currentPeriod = this.Period;
      
      if (value == Period.AM && currentPeriod == Period.PM)
        this.Time -= 60 * 60 * 12;
      else if (value == Period.PM && currentPeriod == Period.AM)
        this.Time += 60 * 60 * 12;
    }
  }
  
  var AlarmActive_ : Boolean = false;
  [Property]
  var AlarmActive : Boolean
  {
    get { return this.AlarmActive_; }
    
    set
    {
      this.AlarmActive_ = value;
      
      this.SetVisible(this.Bell, value);
    }
  }
  [Property]
  var AlarmHours : Integer = 0;
  [Property]
  var AlarmMinutes : Integer = 0;
  [Property]
  var AlarmPeriod : Period = Period.AM;
  [Property]
  var SetOnInitialize : Boolean = true;
  
  var Hours24H : Integer
  {
    get
    {
      var s = this.Time_ as Integer;
      var m = s / 60;
      var h = (m / 60) % 24;
      
      return h;
    }
  }
  
  [Property][Group("Paths")]
  var DH : CogPath;
  [Property][Group("Paths")]
  var Dh : CogPath;
  [Property][Group("Paths")]
  var Colon : CogPath;
  [Property][Group("Paths")]
  var DM : CogPath;
  [Property][Group("Paths")]
  var Dm : CogPath;
  [Property][Group("Paths")]
  var AMPM : CogPath;
  [Property][Group("Paths")]
  var Bell : CogPath;
  
  var Running : Boolean = false;
  var BlinkTimer : Real = 0;
  var BlinkDuration : Real = 1;
  var Blinking : Boolean = false;
  
  
  function Initialize(init : CogInitializer)
  {
    Zero.Connect(Zero.Keyboard, Events.KeyDown, this.OnKeyDown);
    Zero.Connect(this.Space, Events.LogicUpdate, this.OnLogicUpdate);
    Zero.Connect(this.Owner, Events.WebResponse, this.OnWebResponse);
    
    if (this.SetOnInitialize)
      this.RequestTime();
  }
  
  
  function OnKeyDown(event : KeyboardEvent)
  {
    if (event.CtrlPressed && event.Key == Keys.Back)
      this.RequestTime();
  }
  
  
  function OnLogicUpdate(event : UpdateEvent)
  {
    if (this.Running)
    {
      this.Time += event.Dt;
      
      this.SetVisible(this.Colon, this.Seconds % 2 == 0);
      
      if (this.AlarmActive_)
      {
        if (this.Hours == this.AlarmHours && this.Minutes == this.AlarmMinutes && this.Period == this.AlarmPeriod)
        {
          this.Owner.DispatchEvent(Events.AlarmRing, ZilchEvent());
          
          this.AlarmActive = false;
        }
      }
    }
    else
    {
      if (this.BlinkTimer >= this.BlinkDuration)
      {
        this.BlinkTimer -= this.BlinkDuration;
        
        this.SetVisible(this.DH, this.Blinking);
        this.SetVisible(this.Dh, this.Blinking);
        this.SetVisible(this.Colon, this.Blinking);
        this.SetVisible(this.DM, this.Blinking);
        this.SetVisible(this.Dm, this.Blinking);
        this.SetVisible(this.AMPM, this.Blinking);
        this.SetVisible(this.Bell, this.Blinking);
        
        this.Blinking = !this.Blinking;
      }
      
      this.BlinkTimer += event.Dt;
    }
  }
  
  
  function OnWebResponse(event : WebResponseEvent)
  {
    var data = event.Data;
    
    var range = data.FindRangeExclusive("\"currentDateTime\":\"", "\",\"");
    var timeString = range.FindRangeInclusive("T", "-");
    var hoursString = timeString.FindRangeExclusive("T", ":");
    var minutesString = timeString.FindRangeExclusive(":", "-");
    
    var hours = Integer.Parse(hoursString);
    var minutes = Integer.Parse(minutesString);
    var seconds = 0;
    var period = Period.AM;
    
    if (hours > 12)
    {
      hours -= 12;
      period = Period.PM;
    }
    
    this.Hours = hours;
    this.Minutes = minutes;
    this.Seconds = seconds;
    this.Period = period;
    
    this.Running = true;
  }
  
  
  function RequestTime()
  {
    this.WebRequester.Run();
  }
  
  
  function SetClock()
  {
    var t = this.Time_ as Integer / 60;
    var m = t % 60;
    t /= 60;
    var h = t % 24;
    
    if (this.TwentyFourHourTime)
    {
      this.SetVisible(this.DH, true);
      this.SetVisible(this.AMPM, false);
      this.SetDigit(this.AMPM, ExtraCharacters.Full);
    }
    else
    {
      var am = h < 12;
      
      h %= 12;
      
      if (h == 0)
        h = 12;
      
      this.SetVisible(this.DH, h / 10 > 0);
      
      this.SetVisible(this.AMPM, true);
      var ampmFrame = ExtraCharacters.AM + ((!am) as Integer);
      this.SetDigit(this.AMPM, ampmFrame);
    }
    
    this.SetDigit(this.DH, h / 10);
    this.SetDigit(this.Dh, h % 10);
    this.SetDigit(this.Colon, ExtraCharacters.Colon);
    this.SetDigit(this.DM, m / 10);
    this.SetDigit(this.Dm, m % 10);
  }
  
  
  [Display]
  function Reset()
  {
    this.Time = 0;
  }
  
  
  [Display]
  function Break()
  {
    this.SetVisible(this.DH, true);
    this.SetVisible(this.AMPM, true);
    this.SetDigit(this.DH, ExtraCharacters.Full);
    this.SetDigit(this.Dh, ExtraCharacters.Full);
    this.SetDigit(this.Colon, ExtraCharacters.Full);
    this.SetDigit(this.DM, ExtraCharacters.Full);
    this.SetDigit(this.Dm, ExtraCharacters.Full);
    this.SetDigit(this.AMPM, ExtraCharacters.Full);
  }
  
  
  function SetDigit(spritePath : CogPath, value : Integer)
  {
    if (spritePath == null) return;
    var sprite = spritePath.Sprite;
    if (sprite == null) return;
    
    sprite.SetFrame(value);
  }
  
  
  function SetVisible(spritePath : CogPath, value : Boolean)
  {
    if (spritePath == null) return;
    var sprite = spritePath.Sprite;
    if (sprite == null) return;
    
    sprite.Visible = value;
  }
  
  
  [Extension(typeid(Sprite))]
  function SetFrame(frame : Integer)
  {
    this.StartFrame = frame;
    this.CurrentFrame = frame;
  }
}


enum ExtraCharacters
{
  Minus = 10,
  Colon,
  Period,
  AM,
  PM,
  Full,
}


enum Period
{
  AM = 0,
  PM = 1,
}
