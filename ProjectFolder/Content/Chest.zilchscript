class Chest : ZilchComponent
{
  [Dependency]
  var Transform : Transform;
  [Dependency]
  var Sprite : Sprite;
  [Dependency]
  var Openable : Openable;
  
  
  [Property]
  var Contents : Archetype;
  
  var ActionSequence : ActionSequence;
  var ChestFadeOutDuration : Real = 4 / 60.0;
  var IntermediateDelay : Real = 1 / 60.0;
  var ContentsFadeInDuration : Real = 4 / 60.0;
  
  
  function Initialize(init : CogInitializer)
  {
    this.ActionSequence = Action.Sequence(this.Owner.Actions);
    
    Zero.Connect(this.Owner, Events.OpenableCheck, this.OnOpenableCheck);
    Zero.Connect(this.Owner, Events.WasOpened, this.OnWasOpened);
  }
  
  
  function OnOpenableCheck(event : OpenEvent)
  {
    var opener = event.Opener;
    var chestOpener = opener.Owner.ChestOpener;
    
    if (chestOpener != null)
      event.CanOpen = true;
  }
  
  
  function OnWasOpened(event : OpenEvent)
  {
    this.DelayedOpen();
  }
  
  
  function DelayedOpen()
  {
    this.ActionSequence.Cancel();
    this.ActionSequence = Action.Sequence(this.Owner.Actions);
      
      Action.Delay(this.ActionSequence, 0);
      Action.Call(this.ActionSequence, this.Open);
  }
  
  
  function Open()
  {
    var chestSprite = this.Sprite;
    var chestSpriteColor = chestSprite.VertexColor;
    var chestFadeColor = chestSpriteColor;
    chestFadeColor.W = 0;
    
    Action.Property(this.ActionSequence, @chestSprite.VertexColor, chestFadeColor, this.ChestFadeOutDuration, Ease.QuadInOut);
    
    if (this.Contents != null)
    {
      // TODO: make this fade in
      var contents = this.Space.CreateAtPosition(this.Contents, this.Transform.WorldTranslation);
      var contentsSprite = contents.Sprite;
      
      if (contentsSprite != null)
      {
        var color = contentsSprite.VertexColor;
        var fadeColor = color;
        fadeColor.W = 0;
        contentsSprite.VertexColor = fadeColor;
        
        // TODO: assess whether it would be beneficial to make it so that the sequence includes something that
        // turns on the chest's functionality when it's done fading in
        
        var duration = this.ContentsFadeInDuration;
        Action.Property(this.ActionSequence, @contentsSprite.VertexColor, color, duration, Ease.QuadInOut);
      }
    }
    
    Action.Call(this.ActionSequence, this.Owner.Destroy);
  }
}
