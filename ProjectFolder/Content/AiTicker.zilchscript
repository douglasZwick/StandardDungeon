class AiTicker : ZilchComponent
{
  sends AiTick : TickEvent;
  
  
  [Property]
  var BaseTickDelay : Real = 1; // seconds per tick
  [Property]
  var TickDelayVariance : Real = 0; // deviation from the base tick delay
  [Property]
  var RandomInitialTimer : Boolean = false; // whether this instance's timer staring value should be randomized
  
  var TickDelay : Real;
  [Property]
  var TickTimer : Real = 0;
  var RNG : Random = Random();
  [Property]
  var AwarenessRadius : Real = 10;
  var PlayerRef : Cog;
  
  
  function Initialize(init : CogInitializer)
  {
    this.ComputeTickDelay();
    
    if (this.RandomInitialTimer)
      this.TickTimer = this.RNG.Range(0, this.TickDelay);
    
    Zero.Connect(this.Space, Events.LogicUpdate, this.OnLogicUpdate);
    
    this.PlayerRef = this.Space.FindObjectByName("Hero");
  }
  
  
  function OnLogicUpdate(event : UpdateEvent)
  {
    this.TickTimer += event.Dt;
    
    if (this.TickTimer >= this.TickDelay)
    {
      this.TickTimer -= this.TickDelay;
      
      var te = TickEvent();
      te.Dt = event.Dt;
      te.TickDelay = this.TickDelay;
      if(this.IsAwareOfPlayer())
        this.Owner.DispatchEvent(Events.AiTick, te);
      
      this.ComputeTickDelay();
    }
  }
  
  
  function ComputeTickDelay()
  {
    this.TickDelay = this.RNG.Variance(this.BaseTickDelay, this.TickDelayVariance);
  }
  
  function IsAwareOfPlayer() : Boolean
  {
    if(Math.LengthSq(this.PlayerRef.Transform.Translation - this.Owner.Transform.Translation) <= Math.Pow(this.AwarenessRadius, 2))
    {
      return true;
    }
    else
    {
      return false;
    }
  }
}


class TickEvent : ZilchEvent
{
  var Dt : Real;        // the dt of the frame when this tick went off
  var TickDelay : Real; // the most recent tick delay when this tick when off
}
