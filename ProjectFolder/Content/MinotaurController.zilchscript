class MinotaurController : ZilchComponent
{
  [Dependency]
  var Mover : DiscreteMover;
  [Dependency]
  var AiTicker : AiTicker;
  
  var PlayerRef : Cog;
  
  var AwareOfPlayer : Boolean = false;
  var AwarenessRadius : Real = 6.0;
  var PlayerTooClose : Boolean = false;
  var TooCloseDistance : Real = 5.0;
  var AttackTime : Real = 0.85;
  var AttackTimer : Real = 0.0;
  var AttackCharging : Boolean = false;
  var ShockwaveCue : SoundCue = SoundCue.SFX_Shockwave;
  
  function Initialize(init : CogInitializer)
  {
    Zero.Connect(this.Space, Events.LogicUpdate, this.OnLogicUpdate);
    Zero.Connect(this.Owner, Events.AiTick, this.OnAiTick);
    Zero.Connect(this.Owner, Events.WasDamaged, this.OnWasDamaged);
    this.PlayerRef = this.Space.FindObjectByName("Hero");
  }

  function OnLogicUpdate(event : UpdateEvent)
  {
    if(this.AttackCharging)
    {
      this.Owner.Sprite.SpriteSource = SpriteSource.MinotaurAttack;
      this.AttackTimer += event.Dt;
      if(this.AttackTimer >= this.AttackTime)
      {
        var hDiff : Real = this.PlayerRef.Transform.Translation.X - this.Owner.Transform.Translation.X;
        var vDiff : Real = this.PlayerRef.Transform.Translation.Y - this.Owner.Transform.Translation.Y;
        if(Math.Abs(hDiff) > Math.Abs(vDiff))
        {
          //Attack horizontally
          if(hDiff < 0)
          {
            //Attack left
            var shockwaveRef = this.Space.CreateAtPosition(Archetype.ShockwaveHitBox, -Real3.XAxis + this.Owner.Transform.Translation);
            shockwaveRef.ShockwaveHitBoxBehavior.Direction = Directions.Left;
            this.PlayCue();
          }
          else if(hDiff > 0)
          {
            //Attack right
            var shockwaveRef = this.Space.CreateAtPosition(Archetype.ShockwaveHitBox, Real3.XAxis + this.Owner.Transform.Translation);
            shockwaveRef.ShockwaveHitBoxBehavior.Direction = Directions.Right;
            this.PlayCue();
          }
        }
        else
        {
          //Attack vertically
          if(vDiff < 0)
          {
            //Attack down
            var shockwaveRef = this.Space.CreateAtPosition(Archetype.ShockwaveHitBox, -Real3.YAxis + this.Owner.Transform.Translation);
            shockwaveRef.ShockwaveHitBoxBehavior.Direction = Directions.Down;
            this.PlayCue();
          }
          else
          {
            //Attack up
            var shockwaveRef = this.Space.CreateAtPosition(Archetype.ShockwaveHitBox, Real3.YAxis + this.Owner.Transform.Translation);
            shockwaveRef.ShockwaveHitBoxBehavior.Direction = Directions.Up;
            this.PlayCue();
          }
        }
        this.AttackCharging = false;
        this.AttackTimer = 0;
        this.Owner.Sprite.SpriteSource = SpriteSource.MinotaurReady;
      }
    }
    
    var distanceToPlayer : Real = Math.LengthSq(this.PlayerRef.Transform.Translation - this.Owner.Transform.Translation);
    if(distanceToPlayer <= Math.Pow(this.AwarenessRadius, 2))
    {
      this.AwareOfPlayer = true;
    }
    else
    {
      this.AwareOfPlayer = false;
    }
    if(distanceToPlayer <= this.TooCloseDistance)
    {
      this.PlayerTooClose = true;
    }
    else
    {
      this.PlayerTooClose = false;
    }
  }
  
  function OnWasDamaged(event : HealthEvent)
  {
    Console.WriteLine("MINOTAUR TOOK SOME DAMAGE");
  }
  
  function OnAiTick(event : TickEvent)
  {
    var hDiff : Real = this.PlayerRef.Transform.Translation.X - this.Owner.Transform.Translation.X;
    var vDiff : Real = this.PlayerRef.Transform.Translation.Y - this.Owner.Transform.Translation.Y;
    
    if(this.AwareOfPlayer)
    {
      if(this.PlayerTooClose)
      {
        if(Math.Abs(hDiff) < Math.Abs(vDiff))
        {
          //Avoid horizontally
          if(hDiff < 0)
          {
            this.Mover.Move(Real3.XAxis);
          }
          else
          {
            this.Mover.Move(-Real3.XAxis);
          }
        }
        else
        {
          //Avoid vertically
          if(vDiff < 0)
          {
            this.Mover.Move(Real3.YAxis);
          }
          else
          {
            this.Mover.Move(-Real3.YAxis);
          }
        }
      }
      if(this.AttackTimer == 0)
      {
        this.AttackCharging = true;
      }
    }
  }
  
  function PlayCue()
  {
    if (this.ShockwaveCue != null)
      this.Space.SoundSpace.PlayCue(this.ShockwaveCue);
  }
}
