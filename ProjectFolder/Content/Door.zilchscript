class Door : ZilchComponent
{
  [Dependency]
  var Sprite : Sprite;
  [Dependency]
  var Openable : Openable;
  
  
  [Property]
  var ColliderPath : CogPath = CogPath(".");
  
  var Collider : Collider;
  var ActionSequence : ActionSequence;
  
  var Opened : Boolean
  {
    get { return this.Openable.Opened; }
    
    set { this.Openable.Opened = value; }
  }
  
  
  function Initialize(init : CogInitializer)
  {
    this.ActionSequence = Action.Sequence(this.Owner.Actions);
    
    this.Collider = this.ColliderPath.Collider;
    
    // is this okay??? i'm rewriting the Opened value over itself like
    // some kind of dumbass just for the sake of being lazy :(
    if (this.Opened)
      this.Open();
    else
      this.Close();
    
    Zero.Connect(this.Owner, Events.OpenableCheck, this.OnOpenableCheck);
    Zero.Connect(this.Owner, Events.WasOpened, this.OnWasOpened);
  }
  
  
  function OnOpenableCheck(event : OpenEvent)
  {
    var opener = event.Opener;
    var doorOpener = opener.Owner.DoorOpener;
    
    if (doorOpener != null)
      event.CanOpen = true;
  }
  
  
  function OnWasOpened(event : OpenEvent)
  {
    this.DelayedOpen();
  }
  
  
  function DelayedOpen()
  {
    // because of interplay with the movement events, the door opening is
    // buffered by a zero-frame delay. this results in it opening on the
    // very next frame
    
    this.ActionSequence.Cancel();
    this.ActionSequence = Action.Sequence(this.Owner.Actions);
      
      Action.Delay(this.ActionSequence, 0);
      Action.Call(this.ActionSequence, this.Open);
  }
  
  
  function Open()
  {
    this.Opened = true;
    this.Collider.CollisionGroup = CollisionGroup.OpenedDoor;
    this.Sprite.SetFrame(DoorFrame.Opened);
  }
  
  
  function Close()
  {
    this.Opened = false;
    this.Collider.CollisionGroup = CollisionGroup.ClosedDoor;
    this.Sprite.SetFrame(DoorFrame.Closed);
  }
}


enum DoorFrame
{
  Opened,
  Closed,
}


// TODO: when the door opens in the MovementAttempted event, it causes the player
// to move into the door when they're attempting to open it. i'm solving this by
// using a 0-frame delay Action to open the door. the to-do is to assess whether
// this is bad, and if so, fix it
