[Pixel]
struct BoundsClip
{
  [PropertyInput] var Min : Real = -10;
  [PropertyInput] var LowerStop : Real = -9.75;
  [PropertyInput] var UpperStop : Real = 9.75;
  [PropertyInput] var Max : Real = 10;
  
  [BuiltInInput] var ViewToWorld : Real4x4;
  [FragmentInput][StageInput] var ViewPosition : Real3;
  [FragmentInput][Output] var Color : Real4;

  function Main()
  {
    var worldPosition = Math.MultiplyPoint(this.ViewToWorld, this.ViewPosition);
    var y = worldPosition.Y;
    
    var colorIfBetweenStops = this.Color;
    var colorIfOutOfBounds = colorIfBetweenStops;
    colorIfOutOfBounds.W = 0;
    var lowerInterpolant = (y - this.Min) / (this.LowerStop - this.Min);
    var upperInterpolant = (y - this.UpperStop) / (this.Max - this.UpperStop);
    var lowerColor = Math.Lerp(colorIfOutOfBounds, colorIfBetweenStops, lowerInterpolant);
    var upperColor = Math.Lerp(colorIfBetweenStops, colorIfOutOfBounds, upperInterpolant);
    
    var yIsOutOfBounds = y < this.Min || y > this.Max;
    var yIsBetweenStops = y >= this.LowerStop && y <= this.UpperStop;
    var yIsInLowerBand = y >= this.Min && y < this.LowerStop;
    var yIsInUpperBand = y > this.UpperStop && y <= this.Max;
    
    // TODO: figure out whether this branch-discard is actually
    // better or worse than drawing tons of zero-opacity pixels
    
    // is this pixel lower than the min or higher than the max?
    //   if so, it should be discarded
    if (yIsOutOfBounds)
      Shader.Discard();
    
    // is this pixel lower than the lower stop?
    //   if so, it should use the lower color
    //   if not, it's something else
    // that something else:
    // | is this pixel higher than the upper stop?
    // |   if so, it should use the upper color
    // |   if not, it's the normal color
    
    var inner = Math.Lerp(colorIfBetweenStops, upperColor, yIsInUpperBand as Real);
    var outer = Math.Lerp(inner, lowerColor, yIsInLowerBand as Real);
    this.Color = outer;
  }
}
