[Pixel][RenderPass]
struct LCDMeshRenderPass
{
  [BuiltInInput] var ViewToWorld : Real4x4;
  [BuiltInInput] var WorldToView : Real4x4;
  [BuiltInInput] var ViewportSize : Real2;
  
  [StageInput] var PerspectivePosition : Real4;
  [FragmentInput][StageInput] var ViewPosition : Real3;
  
  [Input] var Albedo : Real3 = Real3(1.0, 0.0, 0.0);
  [Input] var ViewNormal : Real3 = Real3(0.0, 0.0, 1.0);
  [Input] var Metallic : Real = 0.0;
  [Input] var Roughness : Real = 1.0;
  [Input] var Specular : Real = 0.5;
  
  [Input] var DitherTexture : Sampler2d;
  [Input] var EnvironmentBrdfLut : Sampler2d;
  [Input] var Skybox : SamplerCube;
  [Input] var IndirectIntensity : Real = 1.0;
  [Input] var RenderDiffuse : Boolean = true;
  [Input] var RenderSpecular : Boolean = true;
  
  [Input] var DirectLightColor : Real3 = Real3(1.0);
  [Input] var DirectLightDirection : Real3 = Real3(0.0, -1.0, 0.0);
  [Input] var DirectLightIntensity : Real = 1.0;
  
  [PropertyInput] var ValueThreshold : Real = 0.5;
  [PropertyInput] var ShadowMode : Boolean = false;
  [PropertyInput] var SolidColor : Real4 = Colors.Black;
  [PropertyInput] var TransparentColor : Real4 = Real4.Zero;
  
  [Output] var Target0 : Real4;

  function Main()
  {
    this.Roughness = Math.Clamp(this.Roughness, 0.001, 1.0);
    this.Metallic = Math.Saturate(this.Metallic);
    this.Specular = Math.Saturate(this.Specular);
    
    var screenUv = Utility.NdcToScreenUv(this.PerspectivePosition.XY / this.PerspectivePosition.W);
    var viewDirection = Math.Normalize(-this.ViewPosition);
    
    // Indirect lighting
    var indirectInputs = ImageBasedLightingInputs();
    indirectInputs.WorldNormal = Math.MultiplyNormal(this.ViewToWorld, this.ViewNormal);
    indirectInputs.WorldViewDirection = Math.MultiplyNormal(this.ViewToWorld, viewDirection);
    indirectInputs.Albedo = this.Albedo;
    indirectInputs.Metallic = this.Metallic;
    indirectInputs.Roughness = this.Roughness;
    indirectInputs.Specular = this.Specular;
    indirectInputs.RenderDiffuse = this.RenderDiffuse;
    indirectInputs.RenderSpecular = this.RenderSpecular;
    
    var indirectColor = ImageBasedLighting.Compute(indirectInputs, &this.Skybox, &this.EnvironmentBrdfLut);
    
    // Direct lighting
    var directInputs = DirectLightingInputs();
    directInputs.ViewNormal = this.ViewNormal;
    directInputs.ViewDirection = viewDirection;
    directInputs.LightDirection = Math.Normalize(-Math.MultiplyNormal(this.WorldToView, this.DirectLightDirection));
    directInputs.LightColor = this.DirectLightColor;
    directInputs.LightRadius = 0.0;
    directInputs.LightDistance = 1.0;
    directInputs.Albedo = this.Albedo;
    directInputs.Metallic = this.Metallic;
    directInputs.Roughness = this.Roughness;
    directInputs.Specular = this.Specular;
    directInputs.RenderDiffuse = this.RenderDiffuse;
    directInputs.RenderSpecular = this.RenderSpecular;
    
    var directColor = DirectLighting.Compute(directInputs);
    
    // Remove color banding
    indirectColor = Utility.ApplyDither(indirectColor, &this.DitherTexture, screenUv, this.ViewportSize);
    directColor = Utility.ApplyDither(directColor, &this.DitherTexture, screenUv, this.ViewportSize);
    
    indirectColor *= this.IndirectIntensity;
    directColor *= this.DirectLightIntensity;
    
    var finalColor = indirectColor + directColor;
    var finalValue = this.ComputeValue(finalColor);
    var interpolant = (finalValue >= this.ValueThreshold) as Real;
    
    this.Target0 = Math.Lerp(this.SolidColor, this.TransparentColor, interpolant);
  }
  
  
  function ComputeValue(color : Real3) : Real
  {
    return Math.Max(color.X, Math.Max(color.Y, color.Z));
  }
}
